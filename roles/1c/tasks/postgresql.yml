---
#postgresql file for 1c
- name: 3.1 Download pgpro-repo-add.sh script
  ansible.builtin.get_url:
    url: "{{ srvr1c_postgresql_repo_url }}"
    dest: "{{ srvr1c_postgresql_repo_dest }}"
    mode: '0755'
  ignore_errors: true

- name: 3.2 Run pgpro-repo-add.sh script
  ansible.builtin.shell: "{{ srvr1c_postgresql_repo_dest }}"
  args:
    chdir: /tmp
  ignore_errors: true

- name: 3.3 Install postgrespro-1c-14
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop: 
    - "{{ srvr1c_postgresql_package_name }}"

- name: 3.4 Move postgres config file
  template:
    src: '{{ srvr1c_templates_postgresql_conf_file[0] }}'
    dest: '{{ srvr1c_templates_postgresql_conf_file[1] }}'
    owner: "{{ srvr1c_postgresql_user }}"
    group: "{{ srvr1c_postgresql_group }}"
    mode: 0750

- name: 3.5 Reload systemd manager configuration
  ansible.builtin.systemd:
    daemon_reload: yes
  become: true

- name: 3.6 Enable and start posgresql
  ansible.builtin.systemd:
    name: "{{ srvr1c_postgresql_service }}"
    state: started
    enabled: yes
  ignore_errors: true
  become: true

- name: 3.7 Check status postgresql service
  shell: "{{ srvr1c_shell_check_postgresql_status }}"
  register: status_postgresql_service

- name: 3.8 Debug postgresql info
  debug:
    msg: 
      - "PostgreSQL status: {{ status_postgresql_service.stdout }}"
  when: srvr1c_debug_status  == true

- name: 3.9 Install psycopg2 for PostgreSQL
  ansible.builtin.apt:
    name: python3-psycopg2
    state: present
  become: true

- name: 3.10 Change password for default PostgreSQL user "postgres"
  become: true
  become_user: "{{ srvr1c_postgresql_user }}"
  ansible.builtin.shell: |
    psql -c "ALTER USER postgres WITH PASSWORD '{{ srvr1c_postgresql_psql_pass }}';"

- name: 3.11 Add allowed subnet to pg_hba.conf
  ansible.builtin.lineinfile:
    path: "/{{ srvr1c_postgresql_conf_dir }}/pg_hba.conf"
    line: "{{ srvr1c_postgresql_subnet }}"
    insertafter: EOF
    state: present
  become: true

- name: 3.12 Restart PostgreSQL service
  ansible.builtin.systemd:
    name: "{{ srvr1c_postgresql_service }}"
    state: restarted
  become: true

- name: 3.13 Get postgresql.conf path
  ansible.builtin.command: "{{ srvr1c_shell_postgresql_conf_postgresql_path }}"
  register: config_file_result
  become: true

- name: 3.14 Get pg_hba.conf path
  ansible.builtin.command: "{{ srvr1c_shell_postgresql_conf_pg_hba_path }}"
  register: hba_file_result
  become: true

- name: 3.15 Set PostgreSQL config file path
  set_fact:
    postgresql_conf_path: "{{ config_file_result.stdout_lines[2].strip() }}"

- name: 3.16 Set pg_hba.conf file path
  set_fact:
    pg_hba_conf_path: "{{ hba_file_result.stdout_lines[2].strip() }}"

- name: 3.17 Check status postgresql service
  shell: "{{ srvr1c_shell_check_postgresql_status }}"
  register: status_postgresql_service

- name: 3.18 Debug postgresql info
  debug:
    msg: 
      - "PostgreSQL status: {{ status_postgresql_service.stdout }}"
  when: srvr1c_debug_status  == true

- name: 3.19 Install and setting pgadmin4
  block:
    - name: 3.19.1 Установка ключа для репозитория pgAdmin
      ansible.builtin.apt_key:
        url: https://www.pgadmin.org/static/packages_pgadmin_org.pub
        state: present
        validate_certs: yes

    - name: 3.19.2 Добавление репозитория pgAdmin в sources.list.d
      ansible.builtin.apt_repository:
        repo: "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/{{ ansible_distribution_release }} pgadmin4 main"
        state: present

    - name: 3.19.3 Обновление списка пакетов
      ansible.builtin.apt:
        update_cache: yes

    - name: 3.19.4 Установка pgAdmin без рекомендуемых пакетов
      ansible.builtin.apt:
        name: pgadmin4-web
        state: present
        install_recommends: no

    - name: 3.19.5 Setting pgadmin
      block:
        - name: 3.19.5.1 Check if pgAdmin has been set up
          stat:
            path: /var/lib/pgadmin
          register: pgadmin_setup

        - name: 3.19.5.2 Ensure required directories exist
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - /var/log/pgadmin
            - /var/lib/pgadmin

        - name: 3.19.5.3 Create configuration database
          command: /usr/pgadmin4/venv/bin/python3 /usr/pgadmin4/web/setup.py setup-db
          when: not pgadmin_setup.stat.exists
          register: db_setup_output
          failed_when: db_setup_output.rc != 0

        - name: 3.19.5.4 Ensure Apache is installed
          apt:
            name: "{{ item }}"
            state: present
          loop:
            - apache2
            - libapache2-mod-wsgi-py3  # Если необходимо, добавьте другие зависимости

        - name: 3.19.5.5 Enable Apache WSGI module
          command: a2enmod wsgi
          register: a2enmod_output
          when: pgadmin_setup.stat.exists == false  # Запускаем, если pgAdmin еще не был установлен
          failed_when: a2enmod_output.rc != 0

        - name: 3.19.5.6 Enable pgAdmin4 Apache configuration
          command: a2enconf pgadmin4
          register: a2enconf_output
          failed_when: a2enconf_output.rc != 0

        - name: 3.19.5.7 Check if Apache is running
          command: pgrep apache2
          register: apache_running
          ignore_errors: yes

        - name: 3.19.5.8 Restart Apache if running
          command: systemctl restart apache2
          when: apache_running.rc == 0
          register: apache_restart_output
          failed_when: apache_restart_output.rc != 0

        - name: 3.19.5.9 Enable and start Apache if not running
          block:
            - name: 3.19.5.9.1 Enable Apache
              command: systemctl enable apache2
              register: apache_enable_output
              failed_when: apache_enable_output.rc != 0

            - name: 3.19.5.9.2 Start Apache
              command: systemctl start apache2
              register: apache_start_output
              failed_when: apache_start_output.rc != 0
          when: apache_running.rc != 0

        - name: 3.19.5.10 Add pgAdmin user with maximum roles
          command: >
            /usr/pgadmin4/venv/bin/python3 /usr/pgadmin4/web/setup.py add-user {{ srvr1c_pgadmin_email }} {{ srvr1c_pgadmin_pass }} --admin --active
          args:
            chdir: /usr/pgadmin4/web/
          register: result

        - name: 3.19.5.11 Log setup completion
          command: touch /var/log/pgadmin/setup_completed.log
          when: pgadmin_setup.stat.exists == false

        - name: 3.19.5.12 Print result
          debug:
            var: result.stdout

        - name: 3.19.5.13 Debug pgadmin
          debug:
            msg: 
              - "Pgadmin4 was opened on: http://{{ srvr1c_postgresql_addr }}/pgadmin4"
              - "Email for auth on pgadmin4: {{ srvr1c_pgadmin_email }}"
              - "Pass for auth on pgadmin4: {{ srvr1c_pgadmin_pass }}"
              - "Hostaddr server for connect to server in pgadmin: {{ srvr1c_postgresql_addr }}"
              - "Port for connect to server in pgadmin: {{ srvr1c_postgresql_port }}"
              - "Username for connect to server in pgadmin: {{ srvr1c_postgresql_user }}"
              - "Password for connect to server in pgadmin: {{ srvr1c_postgresql_psql_pass }}"
          when: apache_running.rc == 0
  become: true