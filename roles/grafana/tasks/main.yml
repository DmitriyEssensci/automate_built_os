---
# main file for grafana
- name: Choose source for downloading Grafana
  block:
    - name: 1.6.1 Check connection to Artifactory server
      ansible.builtin.uri:
        url: "https://dl.grafana.com/enterprise/release/grafana-enterprise_11.2.0_amd64.deb"
        method: HEAD
        return_content: no
        timeout: 10
      register: artifactory_connection
      ignore_errors: yes

    - block:
        - name: 1.0 Ensure /etc/apt/keyrings directory exists
          ansible.builtin.file:
            path: "{{ grafana_ensure_keyrings }}"
            state: directory
            mode: '0755'
          become: true

        - name: 1.1 Download and dearmor Grafana GPG key
          ansible.builtin.get_url:
            url: "{{ grafana_download_pgp }}"
            dest: "{{ grafana_dest_gpg }}"
            mode: '0644'
          become: true

        - name: 1.2 Convert Grafana GPG key to binary format
          ansible.builtin.command:
            cmd: "{{ grafana_convert_gpg }}"
          args:
            creates: "{{ grafana_ensure_keyrings }}/grafana.gpg"
          become: true

        - name: 1.3 Add Grafana APT repository
          ansible.builtin.apt_repository:
            repo: "{{ grafana_repo }}"
            state: present
            filename: grafana
          become: true

        - name: 1.4 Install Grafana
          ansible.builtin.apt:
            name: grafana
            state: present
            update_cache: yes
          become: true
      when: artifactory_connection.status == 200

    - name: Install Grafana Enterprise package from .deb file
      ansible.builtin.apt:
        deb: /tmp/grafana-enterprise_11.2.0_amd64.deb
        state: present
      become: true
      when: artifactory_connection.status is not defined or artifactory_connection.status != 200

- name: 1.5 Create var/lib/grafana/dashboard directory
  ansible.builtin.file:
    path: "{{ grafana_dashboard_path }}"
    state: directory
    mode: '0755'
  become: true

- name: 1.6 Move the Configuration Files & Set Owner
  block: 
    - name: 1.6.1 Create SSL directory
      file:
        path: "{{ grafana_ssl_dir }}"
        state: directory
        owner: "{{ grafana_user }}"
        group: "{{ grafana_group }}"
        mode: '0744'

    - name: 1.6.2 Check if SSL certificate for grafana exists
      ansible.builtin.stat:
        path: "{{ grafana_ssl_dir }}/{{ grafana_ssl_crt }}"
      register: ssl_cert_stat

    - name: 1.6.3 Generate SSL certificate and key for grafana
      ansible.builtin.shell: >
        openssl req -new -newkey rsa:4096 -days 365 -nodes -x509
        -keyout "{{ grafana_ssl_dir }}/{{ grafana_ssl_key }}"
        -out "{{ grafana_ssl_dir }}/{{ grafana_ssl_crt }}"
        -subj "/C=RU/ST=Moskovskaya oblast/L=Moscow/O={{ grafana_name }}/CN={{ ansible_hostname }}"
        -addext "subjectAltName=DNS:localhost,DNS:{{ ansible_hostname }}"
      args:
        chdir: "{{ grafana_ssl_dir }}"

    - name: "1.6.4 Change file permissions in {{ grafana_ssl_dir }}"
      file:
        path: "{{ grafana_ssl_dir }}"
        mode: '0744'
        recurse: yes
  become: true

- name: 1.7 Copy grafana config file and move dashboard in dir
  block: 
    - name: 1.7.1 Copy grafana config file and move dashboard in dir
      template:
        src: "templates/{{ item }}.j2"
        dest: "/{{ item }}"
        mode: '0744'
      with_items: "{{ grafana_config_file }}"

  #   - name: 1.7.2 Copy grafana config file and move dashboard in dir
  #     template:
  #       src: "templates/{{ item }}"
  #       dest: "/{{ item }}"
  #       mode: '0744'
  #     with_items: "{{ grafana_dashboard_main_dashboard_dir }}"
  # become: true

- name: 1.8 Check grafana version
  ansible.builtin.command: 
    cmd: "{{ grafana_check_version }}"
  register: grafana_version

- name: 1.9 Debug check grafana version
  debug:
    msg: "{{ grafana_version }}"

- name: 1.10 Enable grafana systemd and ensure what grafana started
  block:
    - name: 1.10.1 Reload systemd manager configuration
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: 1.10.2 Enable and start grafana service
      ansible.builtin.systemd:
        name: "{{ grafana_service_name }}"
        state: started
        enabled: yes
  become: true

- name: 1.11 Check grafana service 
  shell: "{{ grafana_check_service_status }}"
  register: grafana_status

- name: 1.12 Debug grafana
  debug:
    msg:
      - "Grafana service status: {{ grafana_status.stdout }}"
      - "Grafana will opened on: https://{{ ansible_hostname }}:{{ grafana_config_port }}"
      #- "Prometheus will opened on: https://{{ ansible_default_ipv4.address }}:{{ prometheus_port }}"
